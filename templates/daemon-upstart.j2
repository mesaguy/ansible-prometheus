#! /bin/sh
#
# Do not edit manually, this file is managed using automation tools
#
{% if installer_instance is defined and installer_instance and installer_instance.name -%}
# {{ prometheus_software_name }}__{{ installer_instance.name }}
{% else -%}
# {{ prometheus_software_name }}
{% endif -%}
#
# chkconfig: 2345 55 25
# description: {{ prometheus_software_description }}
#
# processname: {{ prometheus_software_name }}
{% if installer_instance is defined and installer_instance and installer_instance.name -%}
# pidfile: "/var/run/prometheus-{{ prometheus_software_name }}__{{ installer_instance.name }}/{{ prometheus_software_name }}.pid"
{% else -%}
# pidfile: "/var/run/prometheus-{{ prometheus_software_name }}/{{ prometheus_software_name }}.pid"
{% endif -%}

### BEGIN INIT INFO
{% if installer_instance is defined and installer_instance and installer_instance.name -%}
# Provides:          {{ prometheus_software_name }}__{{ installer_instance.name }}
{% else -%}
# Provides:          {{ prometheus_software_name }}
{% endif -%}
# Required-Start:    $local_fs $syslog
# Required-Stop:     $local_fs $syslog
# Should-Start:      $network $syslog
# Should-Stop:       $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: {{ prometheus_software_description }}
# Documentation:     {{ prometheus_software_documentation }}
### END INIT INFO

{% if ansible_os_family == 'RedHat' %}
. /etc/rc.d/init.d/functions
# pull in sysconfig settings
{% if installer_instance is defined and installer_instance and installer_instance.name %}
[ -f /etc/sysconfig/{{ prometheus_software_name }}__{{ installer_instance.name }} ] && . /etc/sysconfig/{{ prometheus_software_name }}__{{ installer_instance.name }}
{% else -%}
[ -f /etc/sysconfig/{{ prometheus_software_name }} ] && . /etc/sysconfig/{{ prometheus_software_name }}
{% endif -%}
{% else -%}
. /lib/lsb/init-functions
set -e
{% endif -%}

umask 022

{% if prometheus_software_env_vars is defined and prometheus_software_env_vars %}
# Custom environmental variables:
set -a
. "{{ prometheus_etc_dir }}/{{ prometheus_software_service_name }}.env"
set +a
{% endif -%}

{% if prometheus_software_prefix_command is defined and prometheus_software_prefix_command -%}
{% set args = prometheus_software_prefix_command[1:] + [prometheus_software_binary] + prometheus_software_command_args %}
DAEMON={{ prometheus_software_prefix_command[0] }}
{% else -%}
{% set args = prometheus_software_command_args %}
DAEMON={{ prometheus_software_binary }}
{% endif -%}
ARGS="{{ args | join(' ') | replace ('"', "'" ) }}"
{% if args -%}
COMMAND="$DAEMON {{ args | join(' ') | replace ('"', "'" ) }}"
COMMAND_UNQUOTED="$DAEMON {{ args | join(' ') | replace ('"', "" ) }}"
{% else -%}
COMMAND="$DAEMON"
COMMAND_UNQUOTED="$DAEMON"
{% endif -%}
{% if ansible_os_family == 'RedHat' -%}
prog="{{ prometheus_software_name }}"
{% endif -%}
{% if installer_instance is defined and installer_instance and installer_instance.name -%}
export PATH="${PATH:+$PATH:}/usr/sbin:/sbin"
logfile="{{ prometheus_log_dir }}/{{ prometheus_software_name }}__{{ installer_instance.name }}.log"
lockfile=/var/lock/subsys/{{ prometheus_software_name }}__{{ installer_instance.name }}
pidfile="/var/run/prometheus-{{ prometheus_software_name }}__{{ installer_instance.name }}/{{ prometheus_software_name }}.pid"
{% else -%}
logfile="{{ prometheus_log_dir }}/{{ prometheus_software_name }}.log"
lockfile=/var/lock/subsys/$prog
pidfile="/var/run/prometheus-{{ prometheus_software_name }}/{{ prometheus_software_name }}.pid"
{% endif -%}
runas_user={% if prometheus_software_runas is defined and prometheus_software_runas -%}
{{ prometheus_software_runas }}
{% else -%}
{{ prometheus_user }}
{% endif -%}
{% if ansible_os_family == 'RedHat' -%}
RETVAL=0

runlevel=$(set -- $(runlevel); eval "echo \$$#" )
{% if prometheus_software_validation_command is defined and prometheus_software_validation_command %}

validate()
{
	{{ prometheus_software_validation_command }}
}
{% endif %}

reload()
{
{% if prometheus_software_validation_command is defined and prometheus_software_validation_command %}
	validate
{% endif %}
	echo -n $"Reloading $prog: "
	kill -HUP $(pidofproc -p $pidfile $DAEMON)
}

start()
{
{% if prometheus_software_validation_command is defined and prometheus_software_validation_command %}
	validate
{% endif %}
	[ -x $DAEMON ] || exit 5
	echo -n $"Starting $prog: "
	# Setup logfile if not owned by root or {{ prometheus_user }}
	if [ "$runas_user" != "root" ] && [ "$runas_user" != "{{ prometheus_user }}" ] ; then
		touch $logfile
		chown $runas_user $logfile
	fi
	# Setup pidfile
	mkdir -p $(dirname $pidfile)
	# Start daemon
	daemon --pidfile=$pidfile --user=$runas_user "$COMMAND >> $logfile 2>&1 &"
	RETVAL=$?
	if [ $RETVAL -eq 0 ];
	then
		ps -ef | grep -F "${COMMAND_UNQUOTED}" | grep -v grep | awk '{print $2}' > $pidfile
		touch $lockfile && success || failure
		echo
	else
		rm -f $lockfile $pidfile
		exit 7;
	fi
	echo
	return $RETVAL
}

stop()
{
	echo -n $"Stopping $prog: "
	killproc -p $pidfile $DAEMON
	RETVAL=$?
	[ $RETVAL -eq 0 ] && rm -f $lockfile
	echo
}

restart() {
	stop
	start
}

rh_status() {
	status -p $pidfile {{ prometheus_software_name }}
}

rh_status_q() {
	rh_status >/dev/null 2>&1
}

case "$1" in
	start)
		rh_status_q && exit 0
		start
		;;
	stop)
		if ! rh_status_q; then
			rm -f $lockfile
			exit 0
		fi
		stop
		;;
{% if prometheus_software_supports_reload is defined and prometheus_software_supports_reload %}
	reload)
		reload
		;;
{% endif %}
	restart)
		restart
		;;
	status)
		rh_status
		RETVAL=$?
		if [ $RETVAL -eq 3 -a -f $lockfile ] ; then
			RETVAL=2
		fi
		;;
	*)
{% if prometheus_software_supports_reload is defined and prometheus_software_supports_reload %}
		echo $"Usage: $0 {start|stop|reload|restart|status}"
{% else %}
		echo $"Usage: $0 {start|stop|restart|status}"
{% endif %}
		RETVAL=2
esac
exit $RETVAL
{% else %}
{% if prometheus_software_validation_command is defined and prometheus_software_validation_command %}

validate ()
{
	{{ prometheus_software_validation_command }}
}
{% endif %}

reload ()
{
{% if prometheus_software_validation_command is defined and prometheus_software_validation_command %}
	validate
{% endif %}
	echo -n $"Reloading $prog: "
	kill -HUP $(pidofproc -p $pidfile $DAEMON)
        echo
}

start ()
{
{% if prometheus_software_validation_command is defined and prometheus_software_validation_command %}
	validate
{% endif %}
	# Setup logfile if not owned by root or {{ prometheus_user }}
	if [ "$runas_user" != "root" ] && [ "$runas_user" != "{{ prometheus_user }}" ] ; then
		touch $logfile
		chown $runas_user $logfile
	fi
	# Setup pidfile
	mkdir -p $(dirname $pidfile)
	log_daemon_msg "Starting {{ prometheus_software_description }}" || true
	if start-stop-daemon --background --chuid $runas_user --start --quiet --oknodo --make-pidfile --pidfile $pidfile --no-close --exec $DAEMON -- $ARGS >> $logfile 2>&1 ; then
		log_end_msg 0 || true
	else
		log_end_msg 1 || true
	fi
}

stop ()
{
	log_daemon_msg "Stopping {{ prometheus_software_description }}" || true
	if start-stop-daemon --stop --quiet --oknodo --pidfile $pidfile; then
	    log_end_msg 0 || true
	else
	    log_end_msg 1 || true
	fi
	rm -f $pidfile
}

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
{% if prometheus_software_supports_reload is defined and prometheus_software_supports_reload %}
	reload)
		reload
		;;
{% endif %}
	restart)
		stop
		start
		;;
	status)
		status_of_proc -p $pidfile {{ prometheus_software_binary }} {{ prometheus_software_name }} && exit 0 || exit $?
		;;
	*)
{% if prometheus_software_supports_reload is defined and prometheus_software_supports_reload %}
	log_action_msg "Usage: $0 {start|stop|reload|restart|status}" || true
{% else %}
	log_action_msg "Usage: $0 {start|stop|restart|status}" || true
{% endif %}
	exit 1
esac
exit 0
{% endif -%}
